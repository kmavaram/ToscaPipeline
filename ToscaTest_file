properties([
    parameters([
    [$class: 'ChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Please Select an Environment', 
        filterLength: 1, 
        filterable: false, 
        name: 'Environment', 
        randomName: 'choice-parameter-331211215156300', 
        script: [$class: 'GroovyScript', 
        fallbackScript: 
        [classpath: [], 
        sandbox: false, 
        script: 'return[\'Error\']'], 
        script: [classpath: [], 
        sandbox: false, 
        script: '''return [
\'\',
\'DEV\',
\'UAT\',
\'PROD\',
\'TRAINING\'
]''']]], 
    [$class: 'CascadeChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Please Select an Database', 
        filterLength: 1, 
        filterable: false, 
        name: 'Database', 
        randomName: 'choice-parameter-331211216910300', 
        referencedParameters: 'Environment', 
        script: [$class: 'GroovyScript', 
        fallbackScript: 
        [classpath: [], 
        sandbox: false, 
        script: 'return["***UNKNOWN Environment***"]'], 
        script: [classpath: [], 
        sandbox: false, 
        script: '''if (Environment.equals("DEV")){
return["", "IFX", "PG"]
}else if (Environment.equals("UAT")){
return["", "CHIP", "MASH", "SPUD"]
}else if (Environment.equals("PROD")){
return["", "PROD"]
}else if (Environment.equals("TRAINING")){
return["", "TRAINING1", "TRAINING2"]
}else {
  return["Select an Environment from drop down"]
}''']]], 
    [$class: 'CascadeChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Please Select an DB_Version', 
        filterLength: 1, 
        filterable: false, 
        name: 'DB_Version', 
        randomName: 'choice-parameter-331211218615800', 
        referencedParameters: 'Database', 
        script: 
        [$class: 'GroovyScript', 
        fallbackScript: 
        [classpath: [], 
        sandbox: false, 
        script: 'return["***UNKNOWN Database***"]'], 
        script: 
        [classpath: [], 
        sandbox: false, 
        script: '''if (Database.equals("IFX")){
return["", "3.23"]
}else if (Database.equals("PG")){
return["", "3.23"]
}else if (Database.equals("CHIP")){
return["", "3.23"]
}else if (Database.equals("MASH")){
return["", "3.23"]
}else if (Database.equals("SPUD")){
return["", "3.23"]
}else if (Database.equals("PROD")){
return["", "3.23"]
}else if (Database.equals("TRAINING1")){
return["", "3.22"]
}else if (Database.equals("TRAINING2")){
return["", "3.23"]
}else {
  return["Select an Database from drop down"]
}''']]], 
    [$class: 'CascadeChoiceParameter', 
        choiceType: 'PT_SINGLE_SELECT', 
        description: 'Please Select an ToscaTestEvent', 
        filterLength: 1, 
        filterable: false, 
        name: 'ToscaTestEvent', 
        randomName: 'choice-parameter-331211220236800', 
        referencedParameters: 'Environment,Database,DB_Version', 
        script:
        [$class: 'GroovyScript', 
        fallbackScript: 
        [classpath: [], 
        sandbox: false,
        script: 'return["***UNKNOWN DB VERSION***"]'], 
        script: [classpath: [], 
        sandbox: false, 
        script: 
'''if (Database.equals("IFX")){
return["", "ToscaEvent_IFX_3.23"]
}else if (Database.equals("PG")){
return["", "ToscaEvent_PG_3.23"]
}else if (Database.equals("CHIP")){
return["", "ToscaEvent_CHIP_3.23"]
}else if  (Database.equals("MASH")){
return["", "ToscaEvent_MASH_3.23"]
}else if (Database.equals("SPUD")){
return["", "ToscaEvent_SPUD_3.23"]
}else if (Database.equals("PROD")){
return["", "ToscaEvent_PROD_3.23"]
}else if (Database.equals("TRAINING1")){
return["", "ToscaEvent_TRAINING1_3.22"]
}else if (Database.equals("TRAINING2")){
return["", "ToscaEvent_TRAINING2_3.23"]
}else {
  return["Select an DB_Version from drop down"]
}''']]], 
booleanParam(
    defaultValue: false, 
    description: '''Check box if you wish to do first run (default =false) 
                    Start New Agent from the selection above
                    Install all required installers to Trigger Events''', 
    name: 'First_Run'),

choice(choices: ['', 'LOL HP Instrument 3.23', 'LOL HP Combined Instrument 3.23'], description: '', name: 'ToscaTest_Event'), booleanParam(defaultValue: false, description: '', name: 'Tosca_Agent'), booleanParam(defaultValue: false, description: '', name: 'Tosca_Event')
    
    ])

])



pipeline {
    agent any

   
    stages {
stage('Get Tosca Agents') {
            when { expression { params.Tosca_Agent == true } }
            steps {
                script {
                    def Agents = httpRequest 'http://prdasstosca01.ad.linz.govt.nz:81/DistributionServerService/MonitorService.svc/GetAgents'
                    def AgentsRC = Agents.getResponseCode();
                     println("Status: "+Agents.status)
                     println("Content: "+Agents.content)
                    if(AgentsRC.equals(200)) {
                    println(Agents.getInputStream().getText());
                    }
              }
       }

            
 }
 
 stage('Get Tosca Events') {
     when { expression { params.Tosca_Event == true } }
            steps {
                script {
                    
                     def Events = httpRequest 'http://prdasstosca01.ad.linz.govt.nz:81/DistributionServerService/MonitorService.svc/GetTestEvents'
                     def EventsRC = Events.getResponseCode();
                     println("Status: "+Events.status)
                     println("Content: "+Events.content)
                    if(EventsRC.equals(200)) {
                    println(Events.getInputStream().getText());
                    }
        
              }
       }

            
 }
 
  stage('LOL HP Instrument 3.23') {
            when { expression { params.ToscaTest_Event == 'LOL HP Instrument 3.23' } }
            steps {
                script {
                

                    def updateall = new URL("http://prdasstosca01.ad.linz.govt.nz:81/rest/ToscaCommander/LINZ_Repo/task/UpdateAll").openConnection();
                    def updateallRC = updateall.getResponseCode();
                    println(updateallRC);
                    if(updateallRC.equals(200)) {
                    println(updateall.getInputStream().getText());
                    }

                    def Refreshagent = new URL("http://prdasstosca01.ad.linz.govt.nz:81/Rest/ToscaCommander/LINZ_Repo/object/39ea82fd-d952-ce23-0196-3dc0986faf50/task/RefreshAgents").openConnection();
                    def RefreshagentRC = Refreshagent.getResponseCode();
                    println(RefreshagentRC);
                    if(RefreshagentRC.equals(200)) {
                    println(Refreshagent.getInputStream().getText());
                    }
                    
                    def TEvent = new URL("http://prdasstosca01.ad.linz.govt.nz:81/Rest/ToscaCommander/LINZ_Repo/object/39fa5e35-639c-7d8d-769a-f394a67d0644/task/ExecuteNow").openConnection();
                    def TEventRC = TEvent.getResponseCode();
                    println(TEventRC);
                    if(TEventRC.equals(200)) {
                    println(TEvent.getInputStream().getText());
                    }
        
              }
       }

            
 }
 
 stage('LOL HP Combined Instrument 3.23') {
     when { expression { params.ToscaTest_Event == 'LOL HP Combined Instrument 3.23' } }
            steps {
                script {

                    def updateall = new URL("http://prdasstosca01.ad.linz.govt.nz:81/rest/ToscaCommander/LINZ_Repo/task/UpdateAll").openConnection();
                    def updateallRC = updateall.getResponseCode();
                    println(updateallRC);
                    if(updateallRC.equals(200)) {
                    println(updateall.getInputStream().getText());
                    }

                    def Refreshagent = new URL("http://prdasstosca01.ad.linz.govt.nz:81/Rest/ToscaCommander/LINZ_Repo/object/39ea82fd-d952-ce23-0196-3dc0986faf50/task/RefreshAgents").openConnection();
                    def RefreshagentRC = Refreshagent.getResponseCode();
                    println(RefreshagentRC);
                    if(RefreshagentRC.equals(200)) {
                    println(Refreshagent.getInputStream().getText());
                    }
                    
                    def TEvent = new URL("http://prdasstosca01.ad.linz.govt.nz:81/Rest/ToscaCommander/LINZ_Repo/object/39fbf953-7622-ba0e-985d-00b1b8cfabb8/task/ExecuteNow").openConnection();
                    def TEventRC = TEvent.getResponseCode();
                    println(TEventRC);
                    if(TEventRC.equals(200)) {
                    println(TEvent.getInputStream().getText());
                    }
        

            }
 }

     }
 
}
}
